openapi: 3.0.3
info:
  title: Ya-chan Public - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
  version: 1.0.0
servers:
  - url: https://api.ya-chan.fr/v1/
tags:
  - name: User
    description: All User manipulation Url

  - name: Anime
    description: Access to Petstore orders

paths:
  /register:
    post:
      description: register user
      tags:
        - User
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: yasuko@ya-chan.fr
                username:
                  type: string
                  example: Yasuko-chan
                password:
                  type: string
                  format: password
                  example: MyUltraSecretPassword
                repeat_password:
                  type: string
                  format: password
                  example: MyUltraSecretPassword
                accept_policy:
                  type: boolean
                  example: true
                birtday:
                  type: string
                  format: date
                  example: "2021-01-30"
              required:
                - email
                - username
                - password
                - repeat_password
                - birthday
                - accept_policy
      responses:
        '201':
          description: User well created
        '400':
          description: Something go wrong
  /login:
    post:
      tags:
        - User
      summary: Log in as user
      description: Log an user in a system and return an JWT token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: yasuko@ya-chan.fr
                password:
                  type: string
                  format: password
                  example: MyUltraSecretPassword
                remenber_me:
                  type: boolean
                  example: true
              required:
                - email
                - password
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /logout:
    get:
      description: Logout user
      tags:
        - User
      security:
        - BearerAuth : []
      responses:
        '200':
          description: User well deconnected
        '401':
          description: User not connected
  /validate/{token}:
    get:
      tags:
        - User
      summary: Validate user email
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string

      responses:
        '200':
          description: User email validated
        '401':
          description: Token not found
  /reset/password:
    post:
      tags:
        - User
      summary: reset an User Password
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: yasuko@ya-chan.fr
              required:
                - email
      responses:
        '200':
          description: Account not found
        '400':
          description: Email not found
  /reset/password/{token}: 
    post:
      tags:
        - User
      summary: reset an User Password
      description: Reset an user password
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: yasuko@ya-chan.fr
                new_password:
                  type: string
                  format: password
                  example: MyNewSecretPassword
                repeat_password:
                  type: string
                  format: password
                  example: MyNewSecretPassword
              required:
                - email
                - new_password
                - repeat_password
      responses:
        '200':
          description: Account not found
        '400':
          description: Email not found
  /token/new:
    post:
      tags:
        - User
      description: Create an API Token
      security:
        - BearerAuth : []
        - ApiKeyAuth : []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                api_name:
                  type: string
                  example: My Incredible API Token
              required:
                - api_name
      responses:
        '200' :
          description: Recover the anime Token
        '401' :
          description: Unauthorized access
  /token/:
    post:
      tags:
        - User
      summary: Create an API Token
      security:
        - BearerAuth : []
        - ApiKeyAuth : []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                api_name:
                  type: string
                  example: My Incredible API Token
              required:
                - api_name
      responses:
        '200' :
          description: We found an anime token
        '401' :
          description: Unauthorized access
        '422' :
          description: Can not find API Token for this user
  /token/revoke:
    post:
      tags:
        - User
      description: Create an API Token
      security:
        - BearerAuth : []
        - ApiKeyAuth : []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                api_name:
                  type: string
                  example: My Incredible API Token
              required:
                - api_name
      responses:
        '200' :
          description: We found an anime token
        '401' :
          description: Unauthorized access
        '422' :
          description: Can not find API Token for this user
    get:
      tags:
        - User
      description : Revoke API Token
      security:
        - ApiKeyAuth : []
      responses:
        '200' :
          description: We found an anime token
        '401' :
          description: Unauthorized access

  /admin/anime:
    post:
      tags: 
        - Anime
      description: Create an anime entity
      security:
        - BearerAuth : []
        - ApiKeyAuth : []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Akame ga Kill
              required:
                - name
      responses:
        '201' : 
          description: Anime created
        '401' :
          description: Access Denied
  /admin/anime/{slug}:
    put:
      tags: 
        - Anime
      description: Update anime entity
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      security:
        - BearerAuth : []
        - ApiKeyAuth : []
      responses:
        '200':
          description: Anime well update
        '401' : 
          description: Access Denied
        '422' :
          description: Anime not found
    get:
      tags: 
        - Anime
      description: Delete anime entity
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      security:
        - BearerAuth : []
        - ApiKeyAuth : []
      responses:
        '200':
          description: Anime well deleted
        '401' : 
          description: Access Denied
        '422' :
          description: Anime not found
  /anime/:
    get:
      tags:
        - Anime
      description: get all anime
      responses:
        '200' : 
          description: Anime found
        '401' : 
          description: User is bot or is scrapping
  /anime/{slug}:
    get:
      tags: 
        - Anime
      description: Create an anime entity
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
      responses:
        '200' : 
          description: Anime found
        '401' : 
          description: User is bot or is scrapping
        '404' : 
          description: Anime not found
  /admin/anime/{slug}/name:
    post:
      tags:
        - Anime
      description: Add a new alternative name
      security:
        - BearerAuth : []
        - ApiKeyAuth : []
      responses:
        '201' : 
          description: Anime created
        '401' :
          description: Access Denied
    put:
      tags:
        - Anime
      description: Add a new alternative name
      security:
        - BearerAuth : []
        - ApiKeyAuth : []
      responses:
        '201' : 
          description: Anime created
        '401' :
          description: Access Denied
  /admin/anime/{slug}/name/delete:
    post:
      tags:
        - Anime
      description: Add a new alternative name
      security:
        - BearerAuth : []
        - ApiKeyAuth : []
      responses:
        '201' : 
          description: Anime created
        '401' :
          description: Access Denied


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          example: yasuko@ya-chan.fr
        username:
          type: string
          example: yasuko
        avatar:
          type: string
          format: url
          example: https://cdn.ya-chan.fr/avatar/BEBE1235.jpg
        password:
          type: string
          example: 'mysupersecretpassword'
        validated:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2021-01-30 20:22:30:123"
        validate_at:
          type: string
          format: date-time
          example: "2021-01-30 20:30:30:123"
        birtday:
          type: string
          format: date
          example: "2021-01-30"

      xml:
        name: user
    Anime:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 42
        name:
          type: string
          example: akame ga kill
        nb_saisons:
          type: integer
          format: int8
          example: 25
        nb_episodes:
          type: integer
          format: int16
        summary:
          type: string
          format: text
          example: My beautifull and fantastic akame ga kill summary
        image:
          type: string
          format: url
          example: https://cdn.ya-chan.fr/anime/akame.png
        trailer:
          type: string
          format: url
          example: https://www.youtube.com/watch?v=dQw4w9WgXcQ
        slug:
          type: string
          example: akame-ga-kill
    AnimeAlternativeName:
      type: object
      properties:
        anime_id:
          type: integer
          format: int32
          example: 123
        name:
          type: string
          example: Akame Ga killu!
    Saison:
      type: object
    Episode:
      type: object
    Tag:
      type: object
    Ost:
      type: object
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key